---
# tasks file for svc

# Get router IP from metallb configuration

- name: lookup vars from k8s cluster
  set_fact: 
    metallb: "{{ lookup('k8s', api_version='v1', kind='ConfigMap',namespace='metallb-system').data.config }}" 

# create bgppeers variables
- name: write configmap to file
  copy:
    content: "{{ metallb }}"
    dest: metallb.yml

- name: create simple bgp peers yml file
  script: 
    cmd: files/mlbcmpeers.py --input metallb.yml --output bgppeers.yml
  args:
    executable: python3

- name: load bgppeers
  include_vars:
    file: bgppeers.yml

- name: Add router addr to inventory
  add_host:
    name: "{{ peeripaddr }}"

# setup ssh key in containers for connection to router(s)
# key stored in k8s secret and projected as file

- name: check for ssh key
  stat:
    path: /opt/ansible/.ssh
  register: ssh_key_dir


- name: setup ssh key for ansible-operator
  command:  "{{ item }}"
  with_items:
    - mkdir /opt/ansible/.ssh
    - cp /tmp/key/ansible-operator /opt/ansible/.ssh/id_rsa
    - chmod 0600 /opt/ansible/.ssh/id_rsa
  when: ssh_key_dir.stat.exists == false
  args:
    warn: false

# Ansible roles are tied to watches therefore the cr vars are not passed as extravars

- name: lookup from cr
  set_fact: 
    public_nic: "{{ lookup('k8s', api_version='v1alpha1', kind='Nft').spec.public_nic }}"
    enable_rateshape:  "{{ lookup('k8s', api_version='v1alpha1', kind='Nft').spec.enable_rateshape }}"



- name: lookup all services
  set_fact: 
    svc: "{{ lookup('k8s', api_version='v1', kind='Service') | to_json }}"
  

- name: write to file
  copy:
    content: "{{ svc }}"
    dest: svc.json

# The converter takes the full output of a services lookup in JSON
# extracts the LoadBalancer services and formats to loadable yaml 

- name:  convert svc.json to svc.yml
  script: 
    cmd: files/svcs-json-yaml.py --j svc.json --y svc.yml
  args:
    executable: python3

- name:  Load the svc vars from svc.yml
  include_vars: 
    file: svc.yml

- name: template the nft service configuration
  template:
    src: operator-svc.j2
    dest: /etc/nftables.d/operator-svc.nft
  delegate_to: "{{ peeripaddr }}"
  become: yes

- name: template the nft tc configuration
  template:
    src: operator-tc.j2
    dest: /etc/nftables.d/operator-tc.nft
  when: enable_rateshape == true
  delegate_to: "{{ peeripaddr }}" 
  become: yes


# Apply the nft cs_configuration

- name: Apply the NFT configuration
  command: /usr/sbin/nft -f /etc/nftables.conf
  delegate_to: "{{ peeripaddr }}"
  become: yes